# -*- coding: utf-8 -*-
"""
/***************************************************************************
 latLonCalcDialog
                                 A QGIS plugin
 tranform lon lat coordinates to DMS coordinates and vice versa


 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-03-26
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Khaled Hammami
        email                : hammami.khaled119@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latloncalc_dialog_base.ui'))


class latLonCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(latLonCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.SpblatD.valueChanged.connect(self.latDMStoDD)
        self.SpbLatM.valueChanged.connect(self.latDMStoDD)
        self.SpbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmb.currentTextChanged.connect(self.latDMStoDD)


        self.SpblonD.valueChanged.connect(self.lonDMStoDD)
        self.SpbLonM.valueChanged.connect(self.lonDMStoDD)
        self.spbLonS.valueChanged.connect(self.lonDMStoDD)
        self.cmbH.currentTextChanged.connect(self.lonDMStoDD)

        self.spbDDlat.editingFinished.connect(self.latDDtoDMS)
        self.spbDDlon.editingFinished.connect(self.lonDDtoDMS)

    def latDMStoDD(self) :
        iDeg = self.SpblatD.value()
        iMin = self.SpbLatM.value()
        iSec = self.SpbLatS.value()
        sHem = self.cmb.currentText()

        dDD = float(iDeg) + iMin/60 + iSec/3600
        if (sHem == 'S') :
            dDD = dDD * -1
        self.spbDDlat.setValue(dDD)


    def lonDMStoDD(self) :
        iDeg = self.SpblonD.value()
        iMin = self.SpbLonM.value()
        iSec = self.spbLonS.value()
        sHem = self.cmbH.currentText()

        dDD = float(iDeg) + iMin/60 + iSec/3600
        if (sHem == 'W') :
            dDD = dDD * -1
        self.spbDDlon.setValue(dDD)

    def latDDtoDMS(self) :
        dDD = self.spbDDlat.value()

        iDeg = int(abs(dDD))
        dMin = (abs(dDD)-iDeg)*60
        iMin = int(dMin)
        dSec = (dMin-iMin)*60

        self.SpblatD.setValue(iDeg)
        self.SpbLatM.setValue(iMin)
        self.SpbLatS.setValue(dSec)

        if(dDD<0) :
            self.cmb.setCurrentText("S")
        else : 
            self.cmb.setCurrentText("N")

    
    def lonDDtoDMS(self) :
        dDD = self.spbDDlon.value()

        iDeg = int(abs(dDD))
        dMin = (abs(dDD)-iDeg)*60
        iMin = int(dMin)
        dSec = (dMin-iMin)*60

        self.SpblonD.setValue(iDeg)
        self.SpbLonM.setValue(iMin)
        self.spbLonS.setValue(dSec)

        if(dDD<0) :
            self.cmbH.setCurrentText("W")
        else : 
            self.cmbH.setCurrentText("E")